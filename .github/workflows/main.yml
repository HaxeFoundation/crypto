name: CI
on: [push, pull_request]

jobs:
  cancel:
    name: "Cancel previous runs"
    runs-on: ubuntu-18.04
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.3.1
        with:
          workflow_id: 1447568
          access_token: ${{ github.token }}

  windows64-test:
    needs: windows64-build
    runs-on: windows-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows64
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
      ARCH: 64
    strategy:
      fail-fast: false
      matrix:
        # TODO enable lua after https://github.com/HaxeFoundation/haxe/issues/5024
        target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, flash9, neko]
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive
      - uses: actions/download-artifact@v1
        with:
          name: win${{env.ARCH}}Binaries

      - name: Install Neko from S3
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/$env:PLATFORM/neko_latest.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV
      - name: Print Neko version
        run: neko -version 2>&1

      # - name: Quick test
      #   shell: pwsh
      #   run: |
      #     $DOWNLOADDIR="./win$($env:ARCH)Binaries"
      #     new-item -Name $DOWNLOADDIR -ItemType directory
      #     Invoke-WebRequest https://build.haxe.org/builds/haxe/$env:PLATFORM/haxe_latest.zip -OutFile $DOWNLOADDIR/haxe_bin.zip

      - name: Setup Haxe
        shell: pwsh
        run: |
          $DOWNLOADDIR="./win$($env:ARCH)Binaries"
          Expand-Archive $DOWNLOADDIR/*_bin.zip -DestinationPath $DOWNLOADDIR
          Set-PSDebug -Trace 1
          $HAXEPATH = Get-ChildItem $DOWNLOADDIR/haxe_*_* -Directory
          Write-Host "::add-path::$HAXEPATH"
          Write-Host "::set-env name=HAXELIB_ROOT::$HAXEPATH\lib"
      - name: Print Haxe version
        shell: pwsh
        run: haxe -version

      - name: "Make Python 3 be available as python3 in the cmdline"
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          $pypath = python -c "import sys; print(sys.executable)"
          $py3path = $pypath.replace("python.exe","python3.exe")
          cmd /c mklink $py3path $pypath
          python3 -V
      - name: Install hererocks
        if: matrix.target == 'lua'
        shell: cmd
        run: |
          pip install hererocks
          hererocks lua53 -l5.3 -rlatest
          call lua53/bin/activate
      - name: Install wget
        if: matrix.target == 'flash9'
        shell: cmd
        run: |
          choco install wget
          wget --version
      - name: Setup haxelib
        shell: pwsh
        run: |
          mkdir "$env:HAXELIB_ROOT"
          haxelib setup "$env:HAXELIB_ROOT"
      - name: Test
        shell: pwsh
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests


  windows-test:
    needs: windows-build
    runs-on: windows-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      PLATFORM: windows
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
      ARCH: 32
    strategy:
      fail-fast: false
      matrix:
        # TODO jvm: https://github.com/HaxeFoundation/haxe/issues/8601
        # TODO enable lua after https://github.com/HaxeFoundation/haxe/issues/5024
        target: [macro, js, hl, cpp, java, cs, php, python, neko]
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive
      - uses: actions/download-artifact@v1
        with:
          name: win${{env.ARCH}}Binaries

      - name: Install Neko from S3
        shell: pwsh
        run: |
          Invoke-WebRequest https://build.haxe.org/builds/neko/$env:PLATFORM/neko_latest.zip -OutFile $env:RUNNER_TEMP/neko_latest.zip
          Expand-Archive $env:RUNNER_TEMP/neko_latest.zip -DestinationPath $env:RUNNER_TEMP
          $NEKOPATH = Get-ChildItem $env:RUNNER_TEMP/neko-*-*
          echo "$NEKOPATH" >> $env:GITHUB_PATH
          echo "NEKOPATH=$NEKOPATH" >> $env:GITHUB_ENV
      - name: Print Neko version
        run: neko -version 2>&1

      # - name: Quick test
      #   shell: pwsh
      #   run: |
      #     $DOWNLOADDIR="./win$($env:ARCH)Binaries"
      #     new-item -Name $DOWNLOADDIR -ItemType directory
      #     Invoke-WebRequest https://build.haxe.org/builds/haxe/$env:PLATFORM/haxe_latest.zip -OutFile $DOWNLOADDIR/haxe_bin.zip

      - name: Setup Haxe
        shell: pwsh
        run: |
          $DOWNLOADDIR="./win$($env:ARCH)Binaries"
          Expand-Archive $DOWNLOADDIR/*_bin.zip -DestinationPath $DOWNLOADDIR
          Set-PSDebug -Trace 1
          $HAXEPATH = Get-ChildItem $DOWNLOADDIR/haxe_*_* -Directory
          Write-Host "::add-path::$HAXEPATH"
          Write-Host "::set-env name=HAXELIB_ROOT::$HAXEPATH\lib"
      - name: Print Haxe version
        shell: pwsh
        run: haxe -version

      - name: "Make Python 3 be available as python3 in the cmdline"
        shell: pwsh
        run: |
          Set-PSDebug -Trace 1
          $pypath = python -c "import sys; print(sys.executable)"
          $py3path = $pypath.replace("python.exe","python3.exe")
          cmd /c mklink $py3path $pypath
          python3 -V
      - name: Install hererocks
        if: matrix.target == 'lua'
        shell: cmd
        run: |
          pip install hererocks
          hererocks lua53 -l5.3 -rlatest
          call lua53/bin/activate
      - name: Install wget
        if: matrix.target == 'flash9'
        shell: cmd
        run: |
          choco install wget
          wget --version
      - name: Setup haxelib
        shell: pwsh
        run: |
          mkdir "$env:HAXELIB_ROOT"
          haxelib setup "$env:HAXELIB_ROOT"
      - name: Test
        shell: pwsh
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests


  mac-test:
    needs: mac-build
    runs-on: macos-latest
    env:
      PLATFORM: mac
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
    strategy:
      fail-fast: false
      matrix:
        target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, flash9, neko]
        include:
          - target: hl
            BREW_PACKAGES: ninja
    steps:
      - uses: actions/checkout@main
        with:
          submodules: recursive
      - uses: actions/download-artifact@v1
        with:
          name: macBinaries

      - name: Install Neko from S3
        run: |
          set -ex
          curl -sSL https://build.haxe.org/builds/neko/$PLATFORM/neko_latest.tar.gz -o $RUNNER_TEMP/neko_latest.tar.gz
          tar -xf $RUNNER_TEMP/neko_latest.tar.gz -C $RUNNER_TEMP
          NEKOPATH=`echo $RUNNER_TEMP/neko-*-*`
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/lib/neko
          sudo ln -s $NEKOPATH/{neko,nekoc,nekoml,nekotools}  /usr/local/bin/
          sudo ln -s $NEKOPATH/libneko.*                      /usr/local/lib/
          sudo ln -s $NEKOPATH/*.ndll                         /usr/local/lib/neko/
          echo "NEKOPATH=$NEKOPATH" >> $GITHUB_ENV
      - name: Print Neko version
        run: neko -version 2>&1

      - name: Setup Haxe
        run: |
          # mkdir ./macBinaries
          # curl -sSL https://build.haxe.org/builds/haxe/mac/haxe_latest.tar.gz -o ./macBinaries/haxe_bin.tar.gz
          set -ex
          tar -xf macBinaries/*_bin.tar.gz -C macBinaries --strip-components=1
          sudo mkdir -p /usr/local/bin/
          sudo mkdir -p /usr/local/share/haxe/
          sudo ln -s `pwd`/macBinaries/haxe /usr/local/bin/haxe
          sudo ln -s `pwd`/macBinaries/haxelib /usr/local/bin/haxelib
          sudo ln -s `pwd`/macBinaries/std /usr/local/share/haxe/std
      - name: Print Haxe version
        run: haxe -version

      - name: Setup haxelib
        run: |
          set -ex
          mkdir ~/haxelib
          haxelib setup ~/haxelib
      - name: Install homebrew packages
        if: matrix.BREW_PACKAGES
        run: brew install ${{matrix.BREW_PACKAGES}}

      - name: Test
        run: |
          # disable invalid Unicode filenames on APFS
          echo "" > sys/compile-fs.hxml
          haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests

