package unit.crypto;

import unit.Test;
import haxe.io.Bytes;
import haxe.Timer;
import haxe.crypto.SCrypt;

class SCryptTest extends Test {

	var plainText = [
		"",
		#if flash
		"70617373776F7264"
		#elseif ( !python )
		"70617373776F7264",
		"706C656173656C65746D65696E",
		#end
		#if ( java || cs )
		"706C656173656C65746D65696E", "70617373776F7264",
		"766572792D6C6F672D70617373776F72642D6F7665722D36342D62797465732D30313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233",
		"706C656173656C65746D65696E", "766572792D6C6F672D70617373776F72642D6F7665722D36342D62797465732D30313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233"
		#end
	];
	var salts = [
		"",
		"4E61436C",
		"536F6469756D43686C6F72696465",
		"536F6469756D43686C6F72696465",
		"7269636D6F6F",
		"536F6469756D43686C6F72696465",
		"766572792D6C6F6E672D70617373776F72642D6F7665722D36342D62797465732D30313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233",
		"766572792D6C6F6E672D70617373776F72642D6F7665722D36342D62797465732D30313233343536373839303132333435363738393031323334353637383930313233343536373839303132333435363738393031323334353637383930313233"
	];
	var costParams = [16, 1024, 16384, 1048576, 262144, 1048576, 1048576, 1048576];
	var blockSizes = [1, 8, 8, 8, 8, 8, 8, 8];
	var parallelizationParams = [1, 16, 1, 1, 1, 1, 1, 1];
	var dkLen = [64, 64, 64, 64, 32, 64, 64, 64,];
	var derivedKeys = [
		"77D6576238657B203B19CA42C18A0497F16B4844E3074AE8DFDFFA3FEDE21442FCD0069DED0948F8326A753A0FC81F17E8D3E0FB2E0D3628CF35E20C38D18906",
		"FDBABE1C9D3472007856E7190D01E9FE7C6AD7CBC8237830E77376634B3731622EAF30D92E22A3886FF109279D9830DAC727AFB94A83EE6D8360CBDFA2CC0640",
		"7023BDCB3AFD7348461C06CD81FD38EBFDA8FBBA904F8E3EA9B543F6545DA1F2D5432955613F0FCF62D49705242A9AF9E61E85DC0D651E40DFCF017B45575887",
		"2101CB9B6A511AAEADDBBE09CF70F881EC568D574A2FFD4DABE5EE9820ADAA478E56FD8F4BA5D09FFA1C6D927C40F4C337304049E8A952FBCBF45C6FA77A41A4",
		"E286ED0298808C0B4BB4272CE947091B0DA06BB530C4CBAB3923E44FF48BBC25",
		"4B6EAB5164ABDFC2966AD0954AE9352BAC57CD953B791EEFF455D3EED95802A31FD498B52DA430E61ED2AAABD5BC8B1A8EEEE66ED11C2BD609877BE40210E9A0",
		"EC1D403E82C01254B9C5BA84AC06958B323AC9F52665024F1EA6ED1EDF7AA639E698481E4CE4BF59F7ABC3EB8C01DE0BA094FE2490E3FAE6D29F5C9E5F697868",
		"BD2785EAF74E4E1883A3DD92336346D480200B7B6D0B7904369C607557AA2B14B4CDC90FC8B8F0D4906203A5BD6E064ADD86AAC9AC2FC4777A5A683A0ED40EF9"
	];

	public function test():Void {
		trace("SCrypt with " + plainText.length + " keys");
		var time = Timer.stamp();
		var scrypt:SCrypt = new SCrypt();
		for (i in 0...plainText.length) {
			var data = scrypt.hash(Bytes.ofHex(plainText[i]), Bytes.ofHex(salts[i]), costParams[i], blockSizes[i], parallelizationParams[i], dkLen[i]);
			eq(data.toHex().toUpperCase(), derivedKeys[i]);
		}
		time = Timer.stamp() - time;
		trace("Finished : " + time + " seconds");
	}
}
