package unit.crypto;

import unit.Test;
import haxe.Timer;
import haxe.io.Bytes;
import haxe.crypto.Salsa20;

class Salsa20Test extends Test {
	var keys = [
		"80000000000000000000000000000000",
		"00400000000000000000000000000000",
		"00002000000000000000000000000000",
		"0F62B5085BAE0154A7FA4DA0F34699EC3F92E5388BDE3184D72A7DD02376C91C",
		"0F62B5085BAE0154A7FA4DA0F34699EC3F92E5388BDE3184D72A7DD02376C91C",
		"0A5DB00356A9FC4FA2F5489BEE4194E73A8DE03386D92C7FD22578CB1E71C417"
	];

	var nonces = [
		"0000000000000000",
		"0000000000000000",
		"0000000000000000",
		"288FF65DC42B92F9",
		"288FF65DC42B92F9",
		"1F86ED54BB2289F0"
	];

	var plainText = [
		"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	];

	var ciphers = [
		"4DFA5E481DA23EA09A31022050859936DA52FCEE218005164F267CB65F5CFD7F2B4F97E0FF16924A52DF269515110A07F9E460BC65EF95DA58F740B7D1DBB0AA",
		"0471076057830FB99202291177FBFE5D38C888944DF8917CAB82788B91B53D1CFB06D07A304B18BB763F888A61BB6B755CD58BEC9C4CFB7569CB91862E79C459",
		"BACFE4145E6D4182EA4A0F59D4076C7E83FFD17E7540E5B7DE70EEDDF9552006B291B214A43E127EED1DA1540F33716D83C3AD7D711CD03251B78B2568F2C844",
		"5E5E71F90199340304ABB22A37B6625BF883FB89CE3B21F54A10B81066EF87DA30B77699AA7379DA595C77DD59542DA208E5954F89E40EB7AA80A84A6176663F",
		"2DA2174BD150A1DFEC1796E921E9D6E24ECF0209BCBEA4F98370FCE629056F64917283436E2D3F45556225307D5CC5A565325D8993B37F1654195C240BF75B16",
		"7998204FED70CE8E0D027B206635C08C8BC443622608970E40E3AEDF3CE790AEEDF89F922671B45378E2CD03F6F62356529C4158B7FF41EE854B1235373988C8"
	];

	var position = [0, 0, 0, 0, 65472, 131008];

	public function test_salsa20():Void {
		trace("Salsa20 for " + keys.length + " keys");
		var time = Timer.stamp();
		for (i in 0...keys.length) {
			var key = Bytes.ofHex(keys[i]);
			var nonce = Bytes.ofHex(nonces[i]);
			var text = Bytes.ofHex(plainText[i]);
			var salsa20 = new Salsa20();
			salsa20.init(key, nonce);
			if (position[i] > 0)
				salsa20.seek(position[i]);
			var enc = salsa20.encrypt(text);
			eq(enc.toHex().toUpperCase(), ciphers[i]);
			salsa20.seek(position[i]);
			var decr = salsa20.decrypt(enc);
			eq(decr.toHex().toUpperCase(), plainText[i]);
		}
		time = Timer.stamp() - time;
		trace("Finished : " + time + " seconds");
	}
}
